version: '3'

services:
  poll:
    build: ./poll
    ports:
      - "5000:80"
    environment:
      - REDIS_HOST=redis
    depends_on:
      redis:
        condition: service_started
    networks:
      - poll-tier
    restart: on-failure

  redis:
    image: "redis:7"
    ports:
      - "6379:6379"
    networks:
      - poll-tier
      - back-tier
    restart: on-failure

  worker:
    build: ./worker
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - back-tier
    restart: on-failure

  result:
    build: ./result
    ports:
      - "5001:80"
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    depends_on:
      db:
        condition: service_healthy
    networks:
      - result-tier
    restart: on-failure

  db:
    image: "postgres:16"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    networks:
      - result-tier
      - back-tier
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  poll-tier:
  result-tier:
  back-tier:


volumes:
  db-data:
